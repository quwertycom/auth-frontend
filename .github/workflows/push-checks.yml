name: Push Checks

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!dev'

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1
  CI: true
  npm_config_update_notifier: false

jobs:
  setup:
    name: Setup Node.js
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
    outputs:
      node-version: ${{ env.NODE_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  format-check:
    name: Check Code Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Check Format
        run: npm run format

  lint:
    name: Lint Code
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run ESLint
        run: npm run lint

  build:
    name: Build Project
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Cache Next.js Build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Build
        run: npm run build
      - name: List Root Directory Contents
        run: ls -la
      - name: List .next Directory Contents
        run: |
          if [ -d ".next" ]; then
            echo "Contents of .next directory:"
            ls -la .next
          else
            echo ".next directory does not exist"
          fi
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          include-hidden-files: true
          if-no-files-found: error
          retention-days: 1
          
  unit-tests:
    name: Unit Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run Unit Tests
        run: npm run test:unit

  integration-tests:
    name: Integration Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run Integration Tests
        run: npm run test:integration

  e2e-tests:
    name: E2E Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E Tests
        run: npm run test:e2e

  app-health:
    name: App Health Check
    needs: [setup, build]
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts
      - name: Verify Downloaded Artifacts
        run: |
          echo "Listing contents of artifacts directory:"
          ls -la ./artifacts
          echo "Checking for .next directory in artifacts:"
          ls -la ./artifacts/.next || echo ".next directory not found"
      - name: Copy Artifacts
        run: |
          mkdir -p ./copied_artifacts
          cp -r ./artifacts/. ./copied_artifacts/
          echo "Contents of copied_artifacts directory:"
          ls -la ./copied_artifacts
      - name: List Artifacts
        run: ls -la ./artifacts
      - name: Verify Build Artifacts
        run: |
          echo "Verifying build artifacts..."
          if [ ! -d ".next" ]; then
            echo "Error: .next directory not found"
            exit 1
          fi
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "Error: .next/BUILD_ID not found"
            exit 1
          fi
          echo "Build artifacts verified successfully"
          ls -la .next
      - name: Start Next.js Server
        run: |
          echo "Starting Next.js server..."
          PORT=3000 NODE_ENV=production npm start &
          echo $! > .nextpid
          
          # Wait for server to be ready
          echo "Waiting for server to be ready..."
          for i in {1..30}; do
            if ! ps -p $(cat .nextpid) > /dev/null; then
              echo "Server process died"
              exit 1
            fi
            
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || true)
            if [ "$response" = "200" ]; then
              echo "Server is ready!"
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timeout waiting for server"
              kill $(cat .nextpid) || true
              exit 1
            fi
            
            echo "Waiting... (attempt $i/30)"
            sleep 2
          done
      - name: Check Health Endpoint
        run: |
          response=$(curl -s http://localhost:3000/api/health)
          echo "Health check response: $response"
          if ! echo "$response" | grep -q '"status":"healthy"'; then
            echo "Health check failed"
            exit 1
          fi
          echo "Health check passed"
      - name: Cleanup
        if: always()
        run: |
          if [ -f .nextpid ]; then
            kill $(cat .nextpid) || true
          fi
