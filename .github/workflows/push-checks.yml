name: Push Checks

on:
  push:
    branches:
      - '**'
      - '!main'
      - '!dev'

env:
  NODE_VERSION: '20.x'
  NEXT_TELEMETRY_DISABLED: 1
  CI: true
  npm_config_update_notifier: false

jobs:
  setup:
    name: Setup Node.js
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ env.NODE_VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  install:
    name: Install Dependencies
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'
      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Install Dependencies
        run: npm ci
      - name: Cache Project
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed

  format-check:
    name: Check Code Format
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Check Format
        run: npm run format

  lint:
    name: Lint Code
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Run ESLint
        run: npm run lint

  build:
    name: Build Project
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Cache Next.js Build
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Build
        run: npm run build
      - name: List Build Output Before Copy
        run: |
          echo "Contents of .next directory:"
          ls -la .next/
      - name: Prepare Standalone Build
        run: |
          # Ensure directories exist
          mkdir -p .next/standalone/.next/static
          # Copy all necessary files
          cp -r .next/static/* .next/standalone/.next/static/
          cp -r .next/server .next/standalone/.next/
          cp -r .next/required-server-files.json .next/standalone/.next/
          cp -r .next/build-manifest.json .next/standalone/.next/
          cp -r .next/app-build-manifest.json .next/standalone/.next/
          cp -r .next/prerender-manifest.json .next/standalone/.next/
          cp -r .next/routes-manifest.json .next/standalone/.next/
          cp -r .next/react-loadable-manifest.json .next/standalone/.next/
          cp -r .next/BUILD_ID .next/standalone/.next/
          # Copy public directory if it exists
          if [ -d "public" ]; then
            cp -r public .next/standalone/
          fi
      - name: List Build Output After Copy
        run: |
          echo "Contents of .next/standalone directory:"
          ls -la .next/standalone/
          echo "Contents of .next/standalone/.next directory:"
          ls -la .next/standalone/.next/
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/standalone

  unit-tests:
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Run Unit Tests
        run: npm run test:unit

  integration-tests:
    name: Integration Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Run Integration Tests
        run: npm run test:integration

  e2e-tests:
    name: E2E Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Restore Project Cache
        uses: actions/cache@v4
        with:
          path: .
          key: ${{ github.sha }}-project-installed
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E Tests
        run: npm run test:e2e

  app-health:
    name: App Health Check
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: standalone
      - name: List Downloaded Files
        run: |
          echo "Contents of standalone directory:"
          ls -la standalone/
      - name: Start App
        env:
          PORT: 3000
          HOSTNAME: "0.0.0.0"
          NODE_ENV: "production"
          NEXT_TELEMETRY_DISABLED: 1
        run: |
          cd standalone
          # Wait for port to be available
          while lsof -i :3000; do sleep 1; done
          # Start the server and wait for it to be ready
          node server.js &
          SERVER_PID=$!
          echo "Waiting for app to start..."
          for i in {1..30}; do
            if curl -s -f http://0.0.0.0:3000/ > /dev/null 2>&1; then
              echo "App is up!"
              break
            fi
            if ! ps -p $SERVER_PID > /dev/null; then
              echo "Server process died"
              exit 1
            fi
            echo "Attempt $i: App not ready yet..."
            sleep 1
          done
      - name: Check App Health
        run: |
          response=$(curl -s -I http://0.0.0.0:3000/)
          echo "Response headers:"
          echo "$response"
          if ! echo "$response" | grep -q "200 OK"; then
            echo "Health check failed"
            exit 1
          fi
